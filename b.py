import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(name)

# --- –ö–õ–Æ–ß–ò ---
TELEGRAM_BOT_TOKEN = "7942858083:AAG1E_upeUZayYi33OfA6y9eGSyo3-dwJc4"
OPENROUTER_API_KEY = "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"

# --- OpenRouter –ö–õ–ò–ï–ù–¢ ---
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# --- GPT-–§–£–ù–ö–¶–ò–Ø ---
async def generate_response(prompt: str) -> str:
    try:
        completion = client.chat.completions.create(
            model="mistralai/mistral-7b-instruct:free",
            max_tokens=1024,
            messages=[{"role": "user", "content": prompt}],
        )

        logger.info(f"üì¶ –û—Ç–≤–µ—Ç –æ—Ç OpenRouter: {completion}")

        if not completion or not completion.choices:
            return "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á –∏ –º–æ–¥–µ–ª—å."

        content = completion.choices[0].message.content
        return content.strip() if content else "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"

# --- Telegram Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    logger.info(f"üì• –°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
    reply = await generate_response(user_message)
    await update.message.reply_text(reply)

# --- –ó–ê–ü–£–°–ö ---
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if name == "main":
    main()